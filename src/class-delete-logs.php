<?php
namespace Chipbug\Tools\Logger;

defined('ABSPATH') or die('No script kiddies please!');

/**
 * handles ajax call to delete logs
 * /wp-content/log.txt (human-readable) is reset to ""
 * /wp-content/log.json (json file) is reset to "[]"
 * /wp-content/debug.log (generated by WP_DEBUG if activated) is reset to ""
 */
class Delete_Logs
{
    /**
     * @var Manage_Logs
     */
    private $manage_logs;

    /**
     * default message
     *
     * @var array
     */
    private $message = array('error_name'=> 'NEW LOG');

     /**
     * initialise
     */
    public function init()
    {
        add_action('wp_ajax_delete_log', array($this,'delete_log'));
    }
    
     /**
     * called by ajax, resets both log files
     * checks nonce first, then resets all log files
     * @return void
      */
    public function delete_log()
    {
        try {
            if ($this->check_nonce()) {
                // wipe human-readable log.txt
                file_put_contents(ABSPATH . 'wp-content/log.txt', "NEW LOG" . PHP_EOL) or error_log('unable to open log.txt');
                // wipe json file log.json
                file_put_contents(ABSPATH . 'wp-content/log.json', '[{"error_name":"NEW LOG"}]') or error_log('unable to open log.json');
                // wipe php log.log - written to by error_log
                file_put_contents(ABSPATH . 'wp-content/debug.log', "NEW LOG" . PHP_EOL) or error_log('unable to open debug.log');
            }
            die();
        } catch (Exception $ex) {
            error_log(get_class($this) . '::' . __FUNCTION__ . '()' . PHP_EOL . 'line ' . $ex->getLine() . ': ' . $ex->getMessage());
        }
    }
    /**
     * checks nonce from ajax call
     * @return bool
     */
    private function check_nonce()
    {
        $nonce = $_POST['logger_nonce'];
        if (wp_verify_nonce($nonce, 'number_used_once')) {
            return true;
        } else {
            return false;
        }
    }
}
